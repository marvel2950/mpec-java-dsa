public class Main {
    public static void main(String[] args) {
        
        //O(1) -> constant
        // System.out.println("Hello World!");
        
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        
        //O(n) -> Linear
        // for(int i=0;i<n;i++){
        //     System.out.println("Akarsh");
        // }
        
        //O(n^2) -> Quadratic
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<n;j++){
        //         System.out.println("Akarsh");
        //     }
        // }
        
        //O(n^2)
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<i;j++){
        //         System.out.println("Akarsh");
        //     }
        // }

// i j
// 0 0
// 1 1
// 2 2
// 3 3
// 4 4

// (1+2+3+4) = n(n+1)/2 = (n^2+n)/2
        
        //i*i < n => i<Math.sqrt(n)
        //O(sqrt(n))
//         for(int i=0;i*i<n;i++){
//             System.out.println("Akarsh");
//         }
        
//         for(int i=0;i<Math.sqrt(n);i++){
//             System.out.println("Akarsh");
//         }
        
        //O(n^2)
        // for(int i=0;i<n*n;i++){
        //     System.out.println("Akarsh");
        // }
        
        //O(n/5) -> O(n)
        // for(int i=0;i<n;i=i+5){
        //    System.out.println("Akarsh"); 
        // }
        
        //O(n)
        // for(int i=10;i<n-5;i++){
        //    System.out.println("Akarsh"); 
        // }
        
        //O(n.sqrt(n))
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<Math.sqrt(n);j++){
        //         System.out.println("Akarsh"); 
        //     }
        // }
        
        //O(1)
        // for(int i=0;i<n;i++){
        //     System.out.println("Akarsh"); 
        //     break;
        // }
        
        //O(n)
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<n;j++){
        //         System.out.println("Akarsh"); 
        //         break;
        //     }
        // }
        
        //O(1)
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<n;j++){
        //         System.out.println("Akarsh"); 
        //         break;
        //     }
        //     break;
        // }
        
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<n;j++){
        //         System.out.println("Akarsh"); 
        //     }
        //     break;
        // }
        
        //O(1)
        // for(int i=0;i<n;i++){
        //     if(i==5)
        //         break;
        //     System.out.println("Akarsh");
        // }
        
        //O(1)
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<n;j++){
        //         if(i==5)
        //             break;
        //         System.out.println("Akarsh"); 
        //     }
        //     break;
        // }
        
        //O(n)
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<n;j++){
        //         if(i==5)
        //             break;
        //         System.out.println("Akarsh"); 
        //     }
        // }
        
        //O(n^2)
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<n;j++){
        //         if(i==n*n)
        //             break;
        //         System.out.println("Akarsh"); 
        //     }
        // }
        
        
        //O(n)
        // for(int i=0;i<n;i++){
        //     if(i==5)
        //         continue;
        //     System.out.println("Akarsh");
        // }
       
        //O(1)
        // for(int i=0;i<n;i++){
        //     if(i>5)
        //         continue;
        //     System.out.println("Akarsh");
        // }
        
        // O(log2n)
        // for(int i=1;i<=n;i=i*2){
        //    System.out.println("Akarsh"); 
        // }
        
 //Base 2       
// n = 64 -> 7 (log(64) = log(2^6) = 6.log2 = 6 )
// n = 32 -> 6
// n = 4 -> 2
    
// n -> logn+1
        
        //Not acceptable -> Infinite loop
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<n;j=j*2){
        //         System.out.println("Akarsh");
        //     }
        // }
        
        //O(nlogn)
        // for(int i=0;i<n;i++){
        //     for(int j=1;j<=n;j=j*2){
        //         System.out.println("Akarsh");
        //     }
        // }
        
        //O(log3n)
        // for(int i=1;i<=n;i=i*3){
        //    System.out.println("Akarsh"); 
        // }
        
        //Not acceptable -> Infinite loop        
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<n;j=j*2){
        //        System.out.println("Akarsh"); 
        //     }
        // }
        
        //O(log3n*log2n)
        // for(int i=1;i<n;i=i*3){
        //     for(int j=1;j<n;j=j*2){
        //         System.out.println("Akarsh");
        //     }
        // }
        
        //O(n^3)
        // for(int i=0;i<n;i++){
        //     for(int j=0;j<i^2;j++){
        //         System.out.println("Akarsh");
        //     }
        // }

// i j
// 0 0
// 1 1
// 2 4
// 3 9

// (1+4+9) = (1+2^2+3^2) = n(n+1)(2n+1)/6 
    
    //O(n^6)
    // for(int i=0;i<n*n;i++){
    //     for(int j=0;j<i^2;j++){
    //         System.out.println("Akarsh");
    //     }
    // }

// n = 2
// i j
// 0 0
// 1 1
// 2 4
// 3 9
    
// (0+1+2^2+3^2 --- m terms) = m(m+1)(2m+1)/6
// m = n^2
        
        for(int i=0;i<n;i++){
            System.out.println("Akarsh");
        }
        for(int i=1;i<=n;i=i*2){
            System.out.println("Akarsh");
        }
        
        //space complexity
        // any extra space allocated apart from input and output
        
        //Array, 2D Array, HashMap, String

        //Array reverse
        //Time -> O(n), Space -> O(n)
        
        int[] arr = {2,5,6,7,1};
        n = arr.length;
        
        int[] revArr = new int[n];
        
        for(int i=n-1;i>=0;i--){
            revArr[n-i-1] = arr[i];
            // System.out.println(arr[i]);
        }
        
        for(int i=0;i<n;i++){
            System.out.println(revArr[i]);
        }

// 1   arr[4]  revArr[0] => (4,0) => (i,n-i-1)
// 7   arr[3]  revArr[1] => (3,1) => (i,n-i-1)
// 6   arr[2]  revArr[2] => (2,2) => (i,n-i-1)
// 5   arr[1]  revArr[3] => (1,3) => (i,n-i-1)
// 2   arr[0]  revArr[4] => (0,4) => (i,n-i-1)




    
    }
}